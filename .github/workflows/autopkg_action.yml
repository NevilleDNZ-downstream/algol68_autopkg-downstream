name: Automated Algol68 RPM & DEB Package Releases using an extension to GNU Autotools

# Notes: customize setup for YOUR new forked repo eg. "ABCDev68-downstream/algol68_autopkg-downstream"
#   [ Where replace ABCDev68 with your GitHub login ]
#   You need:
#     (A) Create YOUR own GPG "ultimate/GPG-key-pair", to be used for creating new subkeys.
#         - eg. gpg --full-generate-key
#     (B) Create a GPG subkey for signing YOUR repo packages released
#     (C) Add this new GPG signing key to your GitHub repo
#     (D) Update this "autopkg_action.yml" with YOUR repo name
#     (E) git commit+push the .yml with YOUR signing key NAME
# Steps:
#   (A) "gpg --full-generate-key" ... read documentation. Add your key name, eg "ABCDev68:algol68:repo"
#     + [ Where you replace ABCDev68 with your GitHub login ]
#   (B) With gpg, run:
#     + $ gpg --edit-key "ABCDev68:algol68:repo"
#     + gpg> addkey
#     +    Your selection? 4 (4) RSA (sign only)
#     +    RSA keys may be between 1024 and 4096 bits long.
#     +    What keysize do you want? (3072) 
#     +    Requested keysize is 3072 bits
#     +    Please specify how long the key should be valid.
#     +          <n>y = key expires in n years
#     +    Key is valid for? (0) 6y
#     +    Key expires at Sun 24 Mar 2030 11:00:44 AEST
#     +    Is this correct? (y/N) y
#     +    Really create? (y/N) y
#     +  ...
#     + returns: ssb  rsa3072/60CC45A2639D9555 => created: 2024-03-25  expires: 2030-03-24  usage: S 
#     + $ gpg --export-secret-keys --armor 60CC45A2639D9555
# -----BEGIN PGP PRIVATE KEY BLOCK-----
#
#  SecretSecretSecretSecretSecretSecretSecretSecretSecretSecret....
#  SecretSecretSecretSecretSecretSecretSecretSecretSecretSecret....
#  SecretSecretSecretSecretSecretSecretSecretSecretSecretSecret....
#
#  -----END PGP PRIVATE KEY BLOCK-----
#    
#   (C) Add (Cut and Paste) this new "PGP PRIVATE KEY BLOCK" to your GitHub repo setup
#      + On "https://github.com/ABCDev68-downstream/algol68_autopkg-downstream/settings/secrets/actions"
#      + => [Actions] => [New repository secret]
#      + ABCDEV68_ALGOL68_AT_SGR_A_NET_EXP_2030_03_24
#   (D) Update this "autopkg_action.yml" script with YOUR repo name [ABCDev68]/[NevilleDNZ] => YOUR name.
#   (E) git commit+push YOUR updates to "ABCDev68-downstream/algol68_autopkg-downstream" branch trunk
on:
  push:
    branches: [ "trunk" ] # , "devel", "feature-ubuntu-support" ]
  pull_request:
    branches: [ "trunk" ] # , "devel", "feature-ubuntu-support" ]
# https://gist.github.com/Daniel-ltw/552b90800b07c22e4a83dfa68ada6318 ...
  repository_dispatch:
    types:
      - star
      - push
# workflow_dispatch: # https://docs.github.com/en/actions/using-workflows/manually-running-a-workflow
# GitHub only exposes manual triggers for workflows that are
# ...present in the repository's default branch.
  workflow_dispatch:
    inputs:
#      environment:
#        description: 'Environment to deploy to (e.g., feature, develop, staging, trunk etc.)'
#        required: true
#        default: 'develop'
      WFDP_BUILD:
        description: 'Build number, normally YYmDD' # LATin TimeZone with months 0..9
        required: true
        default: 'YYmDD' # where 1st Jan=001, Feb=051, Mar=101,... Nov=901, Dec=951
      WFDP_USER_UPSTREAM:
        description: 'Upstream user (source of pkg)'
        required: true
        default: 'NevilleDNZ'
        type: choice
        options:
          - 'NevilleDNZ'
          - 'NevilleDNZ-downstream'
          - 'NevilleDNZ-fork'
      WFDP_PRJ_UPSTREAM:
        description: 'Upstream project repo (source of pkg)'
        required: true
        default: 'algol68g-staging'
        type: choice
        options:
          - 'algol68g-staging'
          - 'algol68g-preview'
          - 'algol68g-mirror'
          - '_algol68toc'
          - '_algol68c'
      WFDP_INCLUDE_LIBS:
        description: 'Std libraries to link in'
        required: true
        default: 'full' # All available libraries
        type: choice
        options:
          - '_tiny' # Minimal libraries to support standard Algol68/r1
          - '_native' # As available on building platform
          - 'full'
      WFDP_RELEASE_NAME:
        description: 'Release to build'
        required: true
        default: '3.5.1'
        type: choice
        options:
          - '1.4.0'
          - '1.8.0'
          - '1.9.0'
          - '1.9.1'
          - '1.9.2'
          - '1.10.0'
          - '1.10.1'
          - '1.10.2'
          - '1.11.0'
          - '1.11.1'
          - '1.12.0'
          - '1.14.0'
          - '1.14.1'
          - '1.15.0'
          - '1.15.1'
          - '1.16.0'
          - '1.17.0'
          - '1.18.0'
          - '2.0.0'
          - '2.0.1'
          - '2.0.2'
          - '2.0.3'
          - '2.1.0'
          - '2.1.1'
          - '2.1.2'
          - '2.2.0'
          - '2.3.0'
          - '2.3.1'
          - '2.3.2'
          - '2.3.3'
          - '2.3.4'
          - '2.3.5'
          - '2.3.6'
          - '2.3.8'
          - '2.3.9'
          - '2.4.0'
          - '2.4.1'
          - '2.5.0'
          - '2.6.0'
          - '2.7.0'
          - '2.8.0'
          - '2.8.1'
          - '2.8.2'
          - '2.8.3'
          - '2.8.4'
          - '3.0.0'
          - '3.0.1'
          - '3.0.2'
          - '3.0.3'
          - '3.0.4'
          - '3.0.5'
          - '3.0.6'
          - '3.0.7'
          - '3.0.8'
          - '3.1.0'
          - '3.1.9'
          - '3.2.0'
          - '3.2.1'
          - '3.3.0'
          - '3.3.5'
          - '3.3.16'
          - '3.3.24'
          - '3.4.1'
          - '3.4.4'
          - '3.4.5'
          - '3.5.0'
          - '3.5.1'
          - '3.5.2'
          - '3.5.3'
          - '3.6.0'
          - '3.7.0'
          - '3.8.0'
          - '3.9.0'
          - '4.0.0'

#      WFDP_OS_REL_MACH:
#        description: 'target OS platform'
#        required: true
#        default: rhel9.3-x86_64
#        type: choice
#        options:
#          - rhel9.3-x86_64
#          - rocky9.3-aarch64
#          - debian11-aarch64
#          - raspbian12-armv7l
#          - ubuntu-latest
#          - ubuntu-20.04
#
#      WFDP_OS:
#        description: 'target OS platform'
#        required: true
#        default: 'ubuntu'
#        type: choice
#        options:
#          - rhel
#          - raspbian
#          - debian
#          - ubuntu
#          - windows
#          - macos
#          - rocky
#          - _aws-al2
#          - _aws-al2023
#          - _archlinux-pacman
#          - _windows-cygwin
#          - _windows-wsl
#          - _windows-exe # Executable Installers (.exe)
#          - _windows-msi # Windows Installer Packages (.msi)
#          - _windows-appxbundle # Windows Store Apps (.appx, .appxbundle)
#          - _windows-application # ClickOnce Deployment (.application)
#          - _windows-chocolatey # Software Management Platforms (e.g., Chocolatey, Winget)
#          - _windows-winget # Software Management Platforms (e.g., Chocolatey, Winget)
#          - _macos-app # Application Bundles (.app)
#          - _macos-pkg # Package Files (.pkg)
#          - _macos-dmg # Disk Images (.dmg)
#          - _macos-app-store # Mac App Store Applications
#          - _freebsd-pkg # pkgsrc - 77%
#          - _openbsd-pkg # pkgsrc - 33%
#          - _netbsd-pkgsrc # pkgsrc (The NetBSD Package Collection) 16%
#          - _solaris-pkg # SVR4 Packages (System V Release 4); depricated
#          - _solaris-ips # IPS (Image Packaging System); Package Archives (.p5p)
#          - _hpux-depot # Software Distributor (SD) Packages
#          - _aix-lpp # LPP (Licensed Program Products) - fileset
#          - _aix-rpm # AIX has adopted the RPM Package Manager format
#          - _pan-os-docker
#          - _pan-linux-flatpak
#          - _pan-linux-appimage
#          - _pan-linux-snap
#          - _pan-linux-oci
#          - _macos-linux-homebrew # Homebrew Formulae
#          - _macos-linux-appimage
#
## https://github.com/actions/runner-images
#      WFDP_OS_RELEASE:
#        description: 'target OS release'
#        required: true
#        default: 'latest'
#        type: choice
#        options:
#          - -latest
#          - 7.9-x86_64 # RHEL
#          - 8.9-x86_64
#          - 9.3-x86_64
#          - 12-armv7l # raspbian
#          - 11-aarch64 # debian
#          - 12-aarch64 # debian
#          - 22-04-3-amd64-vbox
#          - -20.04
#          - -22.04
#          - -24.00
#          - -14-large
#          - -14
#          - -14-xlarge
#          - -13
#          - -13-large
#          - -latest-large
#          - -13-xlarge
#          - -latest
#          - -12
#          - -12-large
#          - -11
#          - _windows-latest
#          - _windows-2022
#          - _windows-2019
#
#      WFDP_OS_ARCH: # as per: Runner.Listener.deps.json
#        description: 'target OS arch'
#        required: true
#        default: 'x64'
#        type: choice
#        options:
#          - arm
#          - arm64
#          - x64
#          - _i686 # ? i386?
#
#      WFDP_OS_VM:
#        description: 'target OS VM'
#        required: true
#        default: 'baremetal'
#        type: choice
#        options:
#          - baremetal
#          - vbox
#          - vmware
#          - xen
      WFDP_AUTOTOOL_CONFIGURE:
        description: 'AutoTool "configure" file - timestamp can be mangeled by git'
        required: true
        default: 'force-preserve'
        type: choice
        options:
          - force-preserve
          - force-remake
          - not-mangled
env:
  NJOBS_WORKFLOW_LEVEL_VAR: 'This is a workflow-level variable'

jobs:

# Your workflow permissions are set to "Read repository contents permission",
# you'll need to change this to "Read and write permissions" to allow
# actions/create-release@v1 to create releases:

  create_release_job: # a.k.a CRJ
    runs-on: ubuntu-latest

    env:
      CRJ_JOB_LEVEL_VAR: 'This is a job-level variable'

    outputs:
      CRJ_upload_url:   ${{ steps.create_release_step.outputs.upload_url }}

      CRJ_RELEASE_NAME: ${{ steps.name_release_step.outputs.CRJ_RELEASE_NAME }}
      CRJ_BUILD:        ${{ steps.name_release_step.outputs.CRJ_BUILD }}

      CRJ_USER_UPSTREAM:      ${{ steps.name_release_step.outputs.CRJ_USER_UPSTREAM }}
      CRJ_PRJ_UPSTREAM:       ${{ steps.name_release_step.outputs.CRJ_PRJ_UPSTREAM }}
      CRJ_INCLUDE_LIBS:       ${{ steps.name_release_step.outputs.CRJ_INCLUDE_LIBS }}
      CRJ_AUTOTOOL_CONFIGURE: ${{ steps.name_release_step.outputs.CRJ_AUTOTOOL_CONFIGURE }}
      CRJ_PRJ:                ${{ steps.name_release_step.outputs.CRJ_PRJ }}

    steps:

      - uses: actions/checkout@v3

      - name: 'Name Release'
        id: name_release_step
        run: |
          cd ${{ github.workspace }}

          eval `date +"Y=%Y m=%m d=%d"`
          y=`expr $Y - 2000`

          case $m in
              (01) m=0;; # make Jan/Feb the zeroth month.
              (02) m=0 d=`expr $d + 50`;; # append Feb to Jan
              (12) m=9 d=`expr $d + 50`;; # append Dec to Nov
              (*)  m=`expr $m - 2`;; # ... Sep, Oct, Nov are now ... 7, 8, 9
          esac
          
          # eval `date '+((d_pc=((%H "*" 60 + %M) "*" 60 + %S) / 864))'`
          
          Build_id=$y$m$d
          #Build_id=$y$m$d$d_pc

          CRJ_BUILD="${{ github.event.inputs.WFDP_BUILD         || 'YYmDD' }}"
          case "$CRJ_BUILD" in
            (YYmDD|"") CRJ_BUILD="$Build_id";;
          # (*)        CRJ_BUILD="$CRJ_BUILD";;
          esac
          
          # ToDo: get most recent release tag on trunk!
          echo CRJ_RELEASE_NAME="${{ github.event.inputs.WFDP_RELEASE_NAME   || '3.5.1' }}" >> $GITHUB_OUTPUT
          echo CRJ_BUILD="$CRJ_BUILD" >> $GITHUB_OUTPUT

          echo CRJ_USER_UPSTREAM="${{ github.event.inputs.WFDP_USER_UPSTREAM || 'NevilleDNZ' }}" >> $GITHUB_OUTPUT
          echo CRJ_PRJ_UPSTREAM="${{ github.event.inputs.WFDP_PRJ_UPSTREAM   || 'algol68g-staging' }}" >> $GITHUB_OUTPUT
          echo CRJ_INCLUDE_LIBS="${{ github.event.inputs.WFDP_INCLUDE_LIBS   || 'full' }}" >> $GITHUB_OUTPUT
          echo CRJ_AUTOTOOL_CONFIGURE="${{ github.event.inputs.WFDP_AUTOTOOL_CONFIGURE || 'force-preserve' }}" >> $GITHUB_OUTPUT
          echo CRJ_PRJ="algol68g" >> $GITHUB_OUTPUT

      - name: 'Create Release'
        id: create_release_step
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        with:
          # ${{ github.ref }} is a context expression in GitHub Actions that
          # provides the full git reference of the commit or branch that triggered
          # the workflow. This can include references to branches, tags, or even
          # pull request events within the GitHub repository.

          # tag_name: ${{ github.ref }}
          # release_name: Release ${{ github.ref }}

          # tag_name: v${{ github.run_number }}
          # release_name: Release v${{ github.run_number }}

          tag_name:             ${{ steps.name_release_step.outputs.CRJ_RELEASE_NAME }}-${{ steps.name_release_step.outputs.CRJ_BUILD }}
          release_name: Release ${{ steps.name_release_step.outputs.CRJ_RELEASE_NAME }}-${{ steps.name_release_step.outputs.CRJ_BUILD }}
          draft: false
          prerelease: false
          body: |
            ## What's Changed...
            * Under costruction.

  os_matrix_job: # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
    # a.k.a. OMJ
    needs: create_release_job
    strategy:
      matrix:
        matrix_os_rel_mach:
#          - ${{ github.event.inputs.WFDP_OS_REL_MACH || 'rhel9.3-x86_64' }}
#          - rhel9.3-x86_64
#          - rocky9.3-aarch64
#          - debian11-aarch64
#          - raspbian12-armv7l
          - ubuntu-latest
          - ubuntu-20.04
#          - fedora38-x86_64
          # - opensuse-leap15.5-x86_64 # sudo zypper --non-interactive install package_name is a problem
#        matrix_os_vm:
#          - DOLLAR{{ github.event.inputs.WFDP_OS_VM || 'baremetal' }}
#          # - baremetal/ssh
#          # - docker
#          # - vbox
#          # - vmware
#          # - xen
        # include: # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners
        #  - { matrix_os_rel_mach: ubuntu-20.04 }
        #  - { matrix_os_rel_mach: ubuntu-22.04 }
        #  - { matrix_os_rel_mach: macos-11 }
        #  - { matrix_os_rel_mach: macos-12 }
        #  - { matrix_os_rel_mach: macos-13 }
        #  - { matrix_os_rel_mach: windows-2019 }
        #  - { matrix_os_rel_mach: windows-2022 }

# From: actions-runner-linux-x64-2.311.0/bin/Runner.Listener.deps.json as per 2023
#  - alpine.{3.{6..18}}-{arm,arm64,x64}
#  - android.{21..32}-{arm,arm64,x64}
#  - arch-x64
#  - centos.{7..9}-{arm64,x64}
#  - debian.{8..12}-{arm,arm64,x64}
#  - exherbo-x64
#  - fedora.{23..39}-{arm64,x64}
#  - gentoo-x64
#  - linux-{arm,arm64,x64}
#  - linuxmint.17.{0..3}-x64
#  - linux-musl-{arm64,x64}
#  - ol.{7{,.0..6},8{,.0}}-x64
#  - opensuse.{13.2,15.{0..1},42.{1..3}}-x64
#  - osx.{10.{10..16},11.0,12,13}-{arm64,x64}
#  - rhel.{6,7{,.0..7},8{,.0..1},9}-{arm64,x64}
#  - rocky.{8,9}-{arm64,x64}
#  - sles.{12{,.1..4},15{,.1}}-x64
#  - tizen.{4.0,5.0,5.5,6.0,6.5,7.0}.0-arm64
#  - ubuntu.{14.04..23.10}-{arm,arm64,x64}

    runs-on: ${{ matrix.matrix_os_rel_mach }}

    env:
      Env_OS_REL_MACH:        ${{ matrix.matrix_os_rel_mach }}

    steps:
#    - name:  update, upgrade and install full
#      run:   |
#         if [ "$RUNNER_OS" == "Linux" ]; then
#              # sudo apt update
#              # sudo apt upgrade
#              sudo apt install libgmp-dev libmpfr-dev r-mathlib libplot-dev libncurses-dev libpq-dev libreadline-dev libgsl-dev
#         elif [ "$RUNNER_OS" == "macOS" ]; then
#              : # softwareupdate -i -a
#         elif [ "$RUNNER_OS" == "Windows" ]; then
#              choco install libgmp-dev libmpfr-dev r-mathlib libplot-dev libncurses-dev libpq-dev libreadline-dev libgsl-dev
#              vcpkg libgmp-dev libmpfr-dev r-mathlib libplot-dev libncurses-dev libpq-dev libreadline-dev libgsl-dev
#         else
#              echo "$RUNNER_OS not supported"
#              exit 1
#         fi
    - uses: actions/checkout@v3
    - uses: actions/checkout@v3
      with:
        repository: ${{ needs.create_release_job.outputs.CRJ_USER_UPSTREAM }}/${{ needs.create_release_job.outputs.CRJ_PRJ_UPSTREAM }}
        path: ${{ github.workspace }}/${{ needs.create_release_job.outputs.CRJ_PRJ_UPSTREAM }}
        # token: ${{ secrets.MYPAT }}

    - name: Use the predefined RUNNER_OS variable
      id: name_build_step
      env:
        S_STEP_LEVEL_VAR: 'This is a step-level variable'
      run: |

        cd ${{ github.workspace }}/${{ needs.create_release_job.outputs.CRJ_PRJ_UPSTREAM }}

        case "$RUNNER_OS" in
            (Linux)
                . /etc/os-release
                os_release=$ID$VERSION_ID;;
            (macOS)
                os_release=$RUNNER_OS;;
            (Windows)
                os_release=$RUNNER_OS;;
            (*)
                echo "$RUNNER_OS not supported" 1>&2
                exit 1
            ;;
        esac

        echo OMJ_OS_RELEASE="$os_release" >> $GITHUB_OUTPUT

    - name: autopkg_depends
      id: autopkg_depends_step
      run: |
        .github/bin/autopkg_depends.sh

#    - name:  update, upgrade and install full
#      run:   |
#        whereis dpkg
#        if [ "$RUNNER_OS" == "Linux" ]; then
#            sudo apt update
#            sudo apt upgrade
#            sudo apt install cdbs libgmp-dev libmpfr-dev r-mathlib libplot-dev libncurses-dev libpq-dev libreadline-dev libgsl-dev
#        elif [ "$RUNNER_OS" == "macOS" ]; then
#            : # softwareupdate -i -a
#        elif [ "$RUNNER_OS" == "Windows" ]; then
#            choco install libgmp-dev libmpfr-dev r-mathlib libplot-dev libncurses-dev libpq-dev libreadline-dev libgsl-dev
#            vcpkg libgmp-dev libmpfr-dev r-mathlib libplot-dev libncurses-dev libpq-dev libreadline-dev libgsl-dev
#        else
#            echo "$RUNNER_OS not supported"
#            exit 1
#        fi

    - name: 'autopkg_spec'
      id: autopkg_spec_step
      run: |

        cd ${{ github.workspace }}/${{ needs.create_release_job.outputs.CRJ_PRJ_UPSTREAM }}
        git fetch --tags
        git checkout tags/${{ needs.create_release_job.outputs.CRJ_RELEASE_NAME }}

        git branch -a

        bld_opts=""

        package_main=a68g

        #--package_builder /usr/bin/dpkg-buildpackage \
        #--local_package_manager /usr/bin/dpkg

        package_builder=`../.github/bin/autopkg_mgr.sh echo builder`
        local_package_manager=`../.github/bin/autopkg_mgr.sh echo local` # eg. rpm or dpkg

        # Be very careful NOT to have white space after a backslash :-/
        python3 ../.github/bin/autopkg_spec.py \
          --Build "${{ needs.create_release_job.outputs.CRJ_BUILD }}" \
          --os_release "${{ steps.name_build_step.outputs.OMJ_OS_RELEASE }}" \
          --package_builder "$package_builder" \
          --local_package_manager "$local_package_manager" \
          --Source https://jmvdveer.home.xs4all.nl/algol68g-${{ needs.create_release_job.outputs.CRJ_RELEASE_NAME }}.tar.gz \
          --DOWNLOAD_PAGE https://jmvdveer.home.xs4all.nl/en.download.algol-68-genie-current.html \
          --DOCUMENTATION_PAGE https://jmvdveer.home.xs4all.nl/en.algol-68-genie.html

    - name: 'gpg import key'
      # if: ${{ secrets.NEVILLED_ALGOL68_AT_SGR_A_NET_EXP_2030_03_24 != '' }}
      id: gpg_step
      env:
        GPG_TTY: $(tty)
      run: |
        echo "${{ secrets.NEVILLED_ALGOL68_AT_SGR_A_NET_EXP_2030_03_24 }}" | gpg --batch --import
        # gpg --list-keys

    - name: autopkg_build
      id: autopkg_build_step
      env:
        GPG_TTY: $(tty)
        DEBSIGN_OPTS: "--no-tty --batch"
      run: |

        cd ${{ github.workspace }}/${{ needs.create_release_job.outputs.CRJ_PRJ_UPSTREAM }}

        OMJ__ARCH=`../.github/bin/autopkg_mgr.sh echo _arch`
        OMJ_ARCH=`../.github/bin/autopkg_mgr.sh echo arch`
        OMJ_EXT=`../.github/bin/autopkg_mgr.sh echo ext`
        OMJ_MIME=`../.github/bin/autopkg_mgr.sh echo mime`

        CRJ_BUILD="${{ needs.create_release_job.outputs.CRJ_BUILD }}"
        CRJ_RELEASE_NAME="${{ needs.create_release_job.outputs.CRJ_RELEASE_NAME }}"
        CRJ_AUTOTOOL_CONFIGURE="${{ needs.create_release_job.outputs.CRJ_AUTOTOOL_CONFIGURE }}"
        CRJ_PRJ="${{ needs.create_release_job.outputs.CRJ_PRJ }}"

        OMJ_BUILDER=${{ steps.name_build_step.outputs.OMJ_BUILDER }}
        OMJ_OS_RELEASE=${{ steps.name_build_step.outputs.OMJ_OS_RELEASE }}

        . ${{ github.workspace }}/.github/bin/autopkg_build.sh
        ./a68g -V

        echo OMJ_ARCH=$OMJ__ARCH >> $GITHUB_OUTPUT
        echo OMJ_ARCH=$OMJ_ARCH >> $GITHUB_OUTPUT
        echo OMJ_EXT=$OMJ_EXT >> $GITHUB_OUTPUT
        echo OMJ_MIME=$OMJ_MIME >> $GITHUB_OUTPUT

        CRJ_tag_name="$CRJ_RELEASE_NAME-$CRJ_BUILD-$OMJ_OS_RELEASE$OMJ__ARCH"
        echo CRJ_tag_name="$CRJ_tag_name" >> $GITHUB_OUTPUT

    - name: 'Upload Release Binary Asset'
      id: upload_bin_step
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release_job.outputs.CRJ_upload_url }} 
        asset_path: ${{ steps.autopkg_build_step.outputs.OMJ_BUILT_BIN }}
        asset_name: ${{ steps.autopkg_build_step.outputs.OMJ_BUILT_BIN_BASENAME }}
        asset_content_type: ${{ steps.autopkg_build_step.outputs.OMJ_MIME }}

#    - name: 'Upload Release Debug Asset'
#      id: upload_dbg_step
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ needs.create_release_job.outputs.CRJ_upload_url }}
#        asset_path: ${{ steps.autopkg_build_step.outputs.OMJ_BUILT_DBG }}
#        asset_name: ${{ steps.autopkg_build_step.outputs.OMJ_BUILT_DBG_BASENAME }}
#        asset_content_type: ${{ steps.autopkg_build_step.outputs.OMJ_MIME }}

    - name: 'Upload Release Source Asset'
      id: upload_src_step
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release_job.outputs.CRJ_upload_url }}
        asset_path: ${{ steps.autopkg_build_step.outputs.OMJ_BUILT_SRC }}
        asset_name: ${{ steps.autopkg_build_step.outputs.OMJ_BUILT_SRC_BASENAME }}
        asset_content_type: ${{ steps.autopkg_build_step.outputs.OMJ_MIME }}

      # asset_path: DOLLAR{{ github.workspace }}/qrtifact/your_package_name.rpm
      #  asset_name: your_package_name.rpm
      #  asset_content_type: application/x-rpm

# Special Environment Variables

# GitHub Actions provides a set of predefined environment variables that you can use in your workflows. These include:
#
#     GITHUB_WORKFLOW: The name of the workflow.
#     GITHUB_RUN_ID and GITHUB_RUN_NUMBER: Unique identifiers for the run.
#     GITHUB_ACTION: The unique identifier (id) of the action.
#     GITHUB_ACTIONS: Set to true when the workflow is running on GitHub Actions.
#     GITHUB_ACTOR: The name of the person or app that initiated the workflow.
#     GITHUB_REPOSITORY: The owner and repository name.
#     GITHUB_EVENT_NAME: The name of the event that triggered the workflow.
#     GITHUB_EVENT_PATH: The path to the file with the complete webhook event payload.
#     GITHUB_WORKSPACE: The GitHub workspace directory path.
#     GITHUB_SHA: The commit SHA that triggered the workflow.
#     GITHUB_REF: The branch or tag ref that triggered the workflow.
#     GITHUB_HEAD_REF and GITHUB_BASE_REF: Used in pull requests, representing the head and base refs.
#     GITHUB_SERVER_URL, GITHUB_API_URL, GITHUB_GRAPHQL_URL: URLs to GitHub server, API, and GraphQL endpoint.
#
# These environment variables provide contextual information about the workflow run, the repository, 
# and the event that triggered the workflow, allowing for more dynamic and informed operations within your actions.
# Summary:
#
#     GITHUB_PATH: Modifies the system PATH for subsequent steps.
#     GITHUB_ENV: Sets or modifies environment variables for subsequent steps. i.e following STEPs
#     GITHUB_OUTPUT: Sets outputs for a step to be used in subsequent steps or jobs. i.e following STEP and JOBS